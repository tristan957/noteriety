// Code generated by go-bindata. DO NOT EDIT.
// sources:
// sql/migrations/0-noteriety.sql
package bindata

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"reflect"
	"strings"
	"time"
	"unsafe"
)

func bindataRead(data, name string) ([]byte, error) {
	var empty [0]byte
	sx := (*reflect.StringHeader)(unsafe.Pointer(&data))
	b := empty[:]
	bx := (*reflect.SliceHeader)(unsafe.Pointer(&b))
	bx.Data = sx.Data
	bx.Len = len(data)
	bx.Cap = bx.Len
	return b, nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sqlMigrations0NoterietySql = "\x43\x52\x45\x41\x54\x45\x20\x54\x41\x42\x4c\x45\x20\x49\x46\x20\x4e\x4f\x54\x20\x45\x58\x49\x53\x54\x53\x20\x6d\x69\x67\x72\x61\x74\x69\x6f\x6e\x28\x0a\x09\x6d\x69\x67\x72\x61\x74\x69\x6f\x6e\x5f\x69\x64\x20\x49\x4e\x54\x45\x47\x45\x52\x20\x50\x52\x49\x4d\x41\x52\x59\x20\x4b\x45\x59\x20\x41\x55\x54\x4f\x49\x4e\x43\x52\x45\x4d\x45\x4e\x54\x2c\x0a\x09\x6e\x61\x6d\x65\x20\x56\x41\x52\x43\x48\x41\x52\x28\x32\x35\x35\x29\x20\x4e\x4f\x54\x20\x4e\x55\x4c\x4c\x20\x55\x4e\x49\x51\x55\x45\x2c\x0a\x09\x72\x61\x6e\x5f\x61\x74\x20\x44\x41\x54\x45\x54\x49\x4d\x45\x20\x44\x45\x46\x41\x55\x4c\x54\x20\x43\x55\x52\x52\x45\x4e\x54\x5f\x54\x49\x4d\x45\x53\x54\x41\x4d\x50\x0a\x29\x3b\x0a\x0a\x43\x52\x45\x41\x54\x45\x20\x54\x41\x42\x4c\x45\x20\x49\x46\x20\x4e\x4f\x54\x20\x45\x58\x49\x53\x54\x53\x20\x6e\x6f\x74\x65\x28\x0a\x09\x6e\x6f\x74\x65\x5f\x69\x64\x20\x49\x4e\x54\x45\x47\x45\x52\x20\x50\x52\x49\x4d\x41\x52\x59\x20\x4b\x45\x59\x20\x41\x55\x54\x4f\x49\x4e\x43\x52\x45\x4d\x45\x4e\x54\x2c\x0a\x09\x6b\x65\x79\x20\x56\x41\x52\x43\x48\x41\x52\x28\x34\x30\x39\x35\x29\x20\x4e\x4f\x54\x20\x4e\x55\x4c\x4c\x20\x55\x4e\x49\x51\x55\x45\x2c\x0a\x09\x65\x6e\x63\x72\x79\x70\x74\x65\x64\x20\x42\x4f\x4f\x4c\x45\x41\x4e\x20\x4e\x4f\x54\x20\x4e\x55\x4c\x4c\x20\x44\x45\x46\x41\x55\x4c\x54\x20\x46\x41\x4c\x53\x45\x2c\x0a\x09\x63\x72\x65\x61\x74\x65\x64\x5f\x61\x74\x20\x44\x41\x54\x45\x54\x49\x4d\x45\x20\x4e\x4f\x54\x20\x4e\x55\x4c\x4c\x20\x44\x45\x46\x41\x55\x4c\x54\x20\x43\x55\x52\x52\x45\x4e\x54\x5f\x54\x49\x4d\x45\x53\x54\x41\x4d\x50\x2c\x0a\x09\x75\x70\x64\x61\x74\x65\x64\x5f\x61\x74\x20\x44\x41\x54\x45\x54\x49\x4d\x45\x20\x4e\x4f\x54\x20\x4e\x55\x4c\x4c\x20\x44\x45\x46\x41\x55\x4c\x54\x20\x43\x55\x52\x52\x45\x4e\x54\x5f\x54\x49\x4d\x45\x53\x54\x41\x4d\x50\x0a\x29\x3b\x0a\x0a\x43\x52\x45\x41\x54\x45\x20\x54\x52\x49\x47\x47\x45\x52\x20\x49\x46\x20\x4e\x4f\x54\x20\x45\x58\x49\x53\x54\x53\x20\x6e\x6f\x74\x65\x5f\x75\x70\x64\x61\x74\x65\x64\x5f\x61\x74\x0a\x09\x41\x46\x54\x45\x52\x20\x55\x50\x44\x41\x54\x45\x0a\x09\x4f\x4e\x20\x6e\x6f\x74\x65\x0a\x42\x45\x47\x49\x4e\x0a\x09\x55\x50\x44\x41\x54\x45\x20\x6e\x6f\x74\x65\x0a\x09\x53\x45\x54\x20\x75\x70\x64\x61\x74\x65\x64\x5f\x61\x74\x20\x3d\x20\x43\x55\x52\x52\x45\x4e\x54\x5f\x54\x49\x4d\x45\x53\x54\x41\x4d\x50\x0a\x09\x57\x48\x45\x52\x45\x20\x6e\x6f\x74\x65\x5f\x69\x64\x20\x3d\x3d\x20\x4e\x45\x57\x2e\x6e\x6f\x74\x65\x5f\x69\x64\x3b\x0a\x45\x4e\x44\x3b\x0a\x0a\x43\x52\x45\x41\x54\x45\x20\x54\x41\x42\x4c\x45\x20\x49\x46\x20\x4e\x4f\x54\x20\x45\x58\x49\x53\x54\x53\x20\x74\x61\x67\x28\x0a\x09\x74\x61\x67\x5f\x69\x64\x20\x49\x4e\x54\x45\x47\x45\x52\x20\x50\x52\x49\x4d\x41\x52\x59\x20\x4b\x45\x59\x20\x41\x55\x54\x4f\x49\x4e\x43\x52\x45\x4d\x45\x4e\x54\x2c\x0a\x09\x6e\x61\x6d\x65\x20\x56\x41\x52\x43\x48\x41\x52\x28\x32\x35\x35\x29\x20\x4e\x4f\x54\x20\x4e\x55\x4c\x4c\x20\x55\x4e\x49\x51\x55\x45\x0a\x29\x3b\x0a\x0a\x43\x52\x45\x41\x54\x45\x20\x54\x41\x42\x4c\x45\x20\x49\x46\x20\x4e\x4f\x54\x20\x45\x58\x49\x53\x54\x53\x20\x63\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x28\x0a\x09\x63\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x5f\x69\x64\x20\x49\x4e\x54\x45\x47\x45\x52\x20\x50\x52\x49\x4d\x41\x52\x59\x20\x4b\x45\x59\x20\x41\x55\x54\x4f\x49\x4e\x43\x52\x45\x4d\x45\x4e\x54\x2c\x0a\x09\x6e\x61\x6d\x65\x20\x56\x41\x52\x43\x48\x41\x52\x28\x32\x35\x35\x29\x20\x4e\x4f\x54\x20\x4e\x55\x4c\x4c\x20\x55\x4e\x49\x51\x55\x45\x0a\x29\x3b\x0a"

func sqlMigrations0NoterietySqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMigrations0NoterietySql,
		"sql/migrations/0-noteriety.sql",
	)
}

func sqlMigrations0NoterietySql() (*asset, error) {
	bytes, err := sqlMigrations0NoterietySqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/migrations/0-noteriety.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sql/migrations/0-noteriety.sql": sqlMigrations0NoterietySql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sql": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"0-noteriety.sql": &bintree{sqlMigrations0NoterietySql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

